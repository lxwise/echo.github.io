<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何设置docker服务器和容器的自启动</title>
      <link href="/2019/06/27/ru-he-she-zhi-docker-fu-wu-qi-he-rong-qi-de-zi-qi-dong/"/>
      <url>/2019/06/27/ru-he-she-zhi-docker-fu-wu-qi-he-rong-qi-de-zi-qi-dong/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="docker设置自动启动"><a href="#docker设置自动启动" class="headerlink" title="docker设置自动启动"></a>docker设置自动启动</h1><h2 id="一、docker服务设置自动启动"><a href="#一、docker服务设置自动启动" class="headerlink" title="一、docker服务设置自动启动"></a>一、docker服务设置自动启动</h2><h3 id="查看已启动的服务"><a href="#查看已启动的服务" class="headerlink" title="查看已启动的服务"></a><strong>查看已启动的服务</strong></h3><p> systemctl list-units –type=service</p><h3 id="查看是否设置开机启动"><a href="#查看是否设置开机启动" class="headerlink" title="查看是否设置开机启动"></a><strong>查看是否设置开机启动</strong></h3><p> systemctl list-unit-files | grep enable</p><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a><strong>设置开机启动</strong></h3><p> systemctl enable docker.service</p><h3 id="关闭开机启动"><a href="#关闭开机启动" class="headerlink" title="关闭开机启动"></a><strong>关闭开机启动</strong></h3><p> systemctl disable docker.service</p><h1 id="二、docker容器设置自动启动"><a href="#二、docker容器设置自动启动" class="headerlink" title="二、docker容器设置自动启动"></a>二、docker容器设置自动启动</h1><p>启动时加</p><p><code>--restart=always</code></p><p> <code></code>docker run -tid –name isaler_v0.0.11 -p 8081:8080 –restart=always` </p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Flag                  Description</span><br><span class="line">no             不自动重启容器. (默认<span class="keyword">value</span>)</span><br><span class="line"><span class="keyword">on</span>-failure     容器发生error而退出(容器退出状态不为<span class="number">0</span>)重启容器</span><br><span class="line">unless-stopped 在容器已经stop掉或Docker stoped/restarted的时候才重启容器</span><br><span class="line">always         在容器已经stop掉或Docker stoped/restarted的时候才重启容器</span><br></pre></td></tr></tbody></table></figure><p>如果已经过运行的项目<br> 如果已经启动的项目，则使用update更新：<br> <code>docker update --restart=always isaler_v0.0.11</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在linux上装jdk1.8并配置环境</title>
      <link href="/2019/06/27/ru-he-zai-linux-shang-zhuang-jdk1-8-bing-pei-zhi-huan-jing/"/>
      <url>/2019/06/27/ru-he-zai-linux-shang-zhuang-jdk1-8-bing-pei-zhi-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>本文主要介绍的是如何是Linux环境下安装JDK的，因为Linux环境下，很多时候也离不开Java的，下面笔者就和大家一起分享如何jdk1.8的过程吧。</p><h1 id="1、安装环境"><a href="#1、安装环境" class="headerlink" title="1、安装环境"></a><strong>1、安装环境</strong></h1><p>操作系统：CentOS7 64位</p><p>jdk版本：1.8</p><p>工具：Xshell6、Xftp6</p><p>说明：Xshell6用于远程连接linux，Xftp用于上传资源到linux，两款软件是配合使用的可自行百度个人使用是免费的</p><h1 id="2、安装步骤"><a href="#2、安装步骤" class="headerlink" title="2、安装步骤"></a>2、安装步骤</h1><p>第一步：下载Linux环境下的jdk1.8安装包  <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">点击移步下载</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/0427212510.jpg" alt=""></p><p>第二步：把下载安装包，上传至服务器中。Xftp的使用方法就不讲了 ，自信百度</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/QQ%E6%88%AA%E5%9B%BE20200427212852.jpg" alt=""></p><p>第三步：解压安装包</p><p>将我们下载好的安装包上传至服务器，进行解压，使用Xshell远程操作</p><p><code>解压命令：tar -zxvf    [里面为你的jdk压缩包名]</code></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/QQ%E6%88%AA%E5%9B%BE20200427213243.jpg" alt=""></p><p>解压完成后，可以在当前目录下看到一个名字为jdk1.8.0_171的文件</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/asdas.jpg" alt=""></p><h1 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h1><p>配置环境变量的配置文件vim  /etc/profile </p><p><code>vim  /etc/profile</code> </p><p>拖到文件最后加上如下字符</p><p><code></code>JAVA_HOME=/opt/jdk1.8.0_171<code></code>PATH=/opt/jdk1.8.0_171/bin:$PATH<code>export JAVA_HOME PATH</code> </p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/sadasd214929.jpg" alt=""></p><p>接着，按ESC键，然后:wq保存退出，输入reboot使服务器重启使jdk环境变量生效</p><p>查看jdk版本</p><p>输入</p><p><code>java -version或javac -version</code></p><p>出现版本号就代表安装成功了 如果没有就去看看profile里是不是配置错了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客主题美化之新增看板娘</title>
      <link href="/2019/06/26/hexo-bo-ke-zhu-ti-mei-hua-zhi-xin-zeng-kan-ban-niang/"/>
      <url>/2019/06/26/hexo-bo-ke-zhu-ti-mei-hua-zhi-xin-zeng-kan-ban-niang/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客主题美化之新增看板娘"><a href="#Hexo博客主题美化之新增看板娘" class="headerlink" title="Hexo博客主题美化之新增看板娘"></a>Hexo博客主题美化之新增看板娘</h1><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190803152152975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="01" style="zoom: 33%;"></p><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p>①首先检查博客主目录下面的 <code>package.json</code>里是否有<br><code>"hexo-helper-live2d": "^3.0.3",</code>依赖，有的话可以先卸载</p><p><code>使用命令：npm uninstall hexo-helper-live2d</code></p><p>②安装模块，如下：</p><p><code>npm install --save hexo-helper-live2d</code></p><p><strong>注意：</strong>命令都是在你的博客主目录执行！！！！</p><p>安装完成之后在<code>package.json</code>会看到安装的model</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/5841000-02a497abe20b74de.png?imageMogr2/auto-orient/strip|imageView2/2/w/607/format/webp" alt="img" style="zoom:50%;"></p><p>此时再去 <code>node_moduels</code>目录下，可以看到有如下文件夹，这些都是动画主配置</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/56212.jpg" alt=""></p><p>③输入以下命令，下载相应的模型，将 packagename 更换成模型名称即可，<a href="http://39.99.158.50/2019/06/26/live2d-kan-ban-niang-yi-lan-tu/">更多模型选择请点击此处</a></p><p><code>$ npm install packagename</code></p><p><code>例如：npm install live2d-widget-model-haruto</code></p><p>④打开博客根目录下的 _config.yml 文件，添加如下代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">enable: true</span><br><span class="line">scriptFrom: local</span><br><span class="line">model: </span><br><span class="line">use: live2d-widget-model-haruto #模型名称 就是你下的</span><br><span class="line">display: </span><br><span class="line">position: right  #模型位置</span><br><span class="line">width: 150       #模型宽度</span><br><span class="line">height: 300      #模型高度</span><br><span class="line">mobile: </span><br><span class="line">show: false      #是否在手机端显示</span><br></pre></td></tr></tbody></table></figure><p>设置好过后我们就拥有了一个卡通人物</p><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190803152152975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzU5MjI0,size_16,color_FFFFFF,t_70" alt="01"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> -hexo -live2d -主题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2d </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>live2d看板娘一览图</title>
      <link href="/2019/06/26/live2d-kan-ban-niang-yi-lan-tu/"/>
      <url>/2019/06/26/live2d-kan-ban-niang-yi-lan-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="live2d看板娘一览图"><a href="#live2d看板娘一览图" class="headerlink" title="live2d看板娘一览图"></a>live2d看板娘一览图</h1><h2 id="模型下载地址：点击移步"><a href="#模型下载地址：点击移步" class="headerlink" title="模型下载地址：点击移步"></a>模型下载地址：<a href="https://github.com/xiazeyu/live2d-widget-models/tree/master/packages" target="_blank" rel="noopener">点击移步</a></h2><h2 id="搭建教程：点击移步"><a href="#搭建教程：点击移步" class="headerlink" title="搭建教程：点击移步"></a>搭建教程：<a href="http://39.99.158.50/2019/06/26/hexo-bo-ke-zhu-ti-mei-hua-zhi-xin-zeng-kan-ban-niang/">点击移步</a></h2><h2 id="模型预览"><a href="#模型预览" class="headerlink" title="模型预览"></a>模型预览</h2><h3 id="live2d-widget-model-chitose"><a href="#live2d-widget-model-chitose" class="headerlink" title="live2d-widget-model-chitose"></a>live2d-widget-model-chitose</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/20181015100606604.png" style="zoom:50%;"></p><h3 id="live2d-widget-model-epsilon2-1"><a href="#live2d-widget-model-epsilon2-1" class="headerlink" title="live2d-widget-model-epsilon2_1"></a>live2d-widget-model-epsilon2_1</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/dasdas.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-gf"><a href="#live2d-widget-model-gf" class="headerlink" title="live2d-widget-model-gf"></a>live2d-widget-model-gf</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/asaadda.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-izumi"><a href="#live2d-widget-model-izumi" class="headerlink" title="live2d-widget-model-izumi"></a>live2d-widget-model-izumi</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/qweqwa.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-koharu"><a href="#live2d-widget-model-koharu" class="headerlink" title="live2d-widget-model-koharu"></a>live2d-widget-model-koharu</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/dsasd123as123.png" style="zoom:50%;"></p><h3 id="live2d-widget-model-miku"><a href="#live2d-widget-model-miku" class="headerlink" title="live2d-widget-model-miku"></a>live2d-widget-model-miku</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/qweqwaa.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-ni-j"><a href="#live2d-widget-model-ni-j" class="headerlink" title="live2d-widget-model-ni-j"></a>live2d-widget-model-ni-j</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/123qsa.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-nico"><a href="#live2d-widget-model-nico" class="headerlink" title="live2d-widget-model-nico"></a>live2d-widget-model-nico</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/asdg1231.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-nietzsche"><a href="#live2d-widget-model-nietzsche" class="headerlink" title="live2d-widget-model-nietzsche"></a>live2d-widget-model-nietzsche</h3><h5 id=""><a href="#" class="headerlink" title=""></a><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/gaseda.png" style="zoom:50%;"></h5><h3 id="live2d-widget-model-nipsilon"><a href="#live2d-widget-model-nipsilon" class="headerlink" title="live2d-widget-model-nipsilon"></a>live2d-widget-model-nipsilon</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/gawsdas.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-nito"><a href="#live2d-widget-model-nito" class="headerlink" title="live2d-widget-model-nito"></a>live2d-widget-model-nito</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/jhsdh.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-shizuku"><a href="#live2d-widget-model-shizuku" class="headerlink" title="live2d-widget-model-shizuku"></a>live2d-widget-model-shizuku</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/fafas.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-tororo"><a href="#live2d-widget-model-tororo" class="headerlink" title="live2d-widget-model-tororo"></a>live2d-widget-model-tororo</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/hfssd.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-tsumiki"><a href="#live2d-widget-model-tsumiki" class="headerlink" title="live2d-widget-model-tsumiki"></a>live2d-widget-model-tsumiki</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/jgfjfg.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-unitychan"><a href="#live2d-widget-model-unitychan" class="headerlink" title="live2d-widget-model-unitychan"></a>live2d-widget-model-unitychan</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/hgfhfg.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-wanko"><a href="#live2d-widget-model-wanko" class="headerlink" title="live2d-widget-model-wanko"></a>live2d-widget-model-wanko</h3><p><img src="/medias/loading.gif" data-original="C:\Users\liuxin\Desktop\img\cutImages\ghfg.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-z16"><a href="#live2d-widget-model-z16" class="headerlink" title="live2d-widget-model-z16"></a>live2d-widget-model-z16</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/jgfs.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-hibiki"><a href="#live2d-widget-model-hibiki" class="headerlink" title="live2d-widget-model-hibiki"></a>live2d-widget-model-hibiki</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/jgdff.jpg" style="zoom:50%;"></p><h3 id="live2d-widget-model-hijiki"><a href="#live2d-widget-model-hijiki" class="headerlink" title="live2d-widget-model-hijiki"></a>live2d-widget-model-hijiki</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/jfgfg.jpg" style="zoom:50%;"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> -live2d -主题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -live2d -hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo为博客更换自己喜欢的主题</title>
      <link href="/2019/06/26/shi-yong-hexo-wei-bo-ke-geng-huan-zi-ji-xi-huan-de-zhu-ti/"/>
      <url>/2019/06/26/shi-yong-hexo-wei-bo-ke-geng-huan-zi-ji-xi-huan-de-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo为博客更换自己喜欢的主题"><a href="#Hexo为博客更换自己喜欢的主题" class="headerlink" title="Hexo为博客更换自己喜欢的主题"></a>Hexo为博客更换自己喜欢的主题</h1><p>博客也搭建好了，文章也会写了,但是默认主题巨丑怎么办，那我们就自定义自己喜欢的主题</p><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">点击此处</a>进入 Hexo 官网的主题专栏</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/QQ%E6%88%AA%E5%9B%BE20200426200500.png" alt=""></p><p>我们要做的就是把主题克隆过来，在此我们以主题 <a href="https://github.com/nexmoe/hexo-theme-nexmoe" target="_blank" rel="noopener">Nexmoe</a> 为例，点进去我们就可以看见该主题作者的博客，点击Clone or download 复制https地址，在博客根目录的themes（比如我的D:\blog\themes）打开Git命令行输入</p><p><code>git clone https://github.com/theme-nexmoe/hexo-theme-nexmoe.git</code></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/QQ%E6%88%AA%E5%9B%BE20200426201008.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/2020202020.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/20200426202143.png" alt=""></p><p>待下载完成后即可在 themes 目录下生成 hexo-theme-nexmoe 文件夹，然后打开 blog 文件夹下的配置文件 _config.yml ，找到关键字 theme，修改参数为：hexo-theme-nexmoe（其他主题修改成相应名称即可），再次注意冒号后面有一个空格！</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/202004262qwe0.jpg" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/200426203012.jpg" alt=""></p><p>返回 Hexo 目录，右键 Git Bash Here ，输入以下命令开始部署主题：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><p>此时打开浏览器，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可看见我们的主题已经更换了，如果感觉效果满意，我们就可以把它部署到Github上了</p><p><code>hexo d</code></p><p>此时访问自己的博客即可看见更换后的主题，但我们仍然需要对主题的相关配置进行修改，比如网站标题，图标等等具体配置请移步<a href="https://docs.nexmoe.com/hexo-nexmoe/start" target="_blank" rel="noopener">《快速开始》</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> 主题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo和github搭建自己的博客超详细奶妈级别教程</title>
      <link href="/2019/06/25/shi-yong-hexo-he-github-da-jian-zi-ji-de-bo-ke-chao-xiang-xi-nai-ma-ji-bie-jiao-cheng/"/>
      <url>/2019/06/25/shi-yong-hexo-he-github-da-jian-zi-ji-de-bo-ke-chao-xiang-xi-nai-ma-ji-bie-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="入门简介"><a href="#入门简介" class="headerlink" title="入门简介"></a>入门简介</h1><p>博客有第三方平台，也可以自建，比较早的有博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。今天我们学习的是Hexo+Github的方式。</p><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。</p><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>百度搜索git，点击进入</p><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">点击Downloads</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/01.png" alt=""></p><p>接着</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/jkl.jpg" alt=""></p><p>不知道的朋友可以鼠标右击此电脑（或我的电脑）点属性就可以看到了!</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/03.png" alt=""></p><p>然后无限下一步安装就行了（注意安装目录不要有中文字符和空格）</p><p>git安装好在任何一个文件夹右击鼠标后出现以下选项，证明Git安装好了</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/04.png" alt=""></p><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><p>百度搜索nodejs或直接<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">点击此处进入下载官网</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/05.png" alt=""></p><p>然后无限下一步安装就行</p><h4 id="检验Git是否安装成功"><a href="#检验Git是否安装成功" class="headerlink" title="检验Git是否安装成功"></a>检验Git是否安装成功</h4><p>在桌面右键鼠标，可以看到菜单里多了 Git GUI Here 和 Git Bash Here两个选项，第一个是图形界面的Git操作，另一个是命令行，选择第二个</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入`</span><br><span class="line"></span><br><span class="line">`git --version`  </span><br><span class="line"></span><br><span class="line">`node -v  </span><br><span class="line">`npm -v`</span><br></pre></td></tr></tbody></table></figure><p>如果出现版本号则表示安装成功</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/06.png" alt=""></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>新建一个文件夹如：我的文件夹为：D\blog），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 Git Bash Here，输入以下 npm 命令即可安装，第一个命令表示安装 hexo，第二个命令表示安装 hexo 部署到 git page 的 deployer，如图所示即为安装成功</p><p><code>npm install hexo-cli -g</code><br><code>npm install hexo-deployer-git --save</code></p><p><img src="/medias/loading.gif" data-original="C:\Users\liuxin\Desktop\新建文件夹\07.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/1587815492340.png" alt=""></p><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>在创的文件夹下右键鼠标，点击 Git Bash Here，输入以下命令，如图所示则安装成功</p><p><code>hexo init</code></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/image-20200426184659932.png" alt="image-20200426184659932"></p><p>Hexo安装完成后，将在blog目录中新建所需要的文件，如下</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/10.png" alt=""></p><h3 id="Hexo使用命令"><a href="#Hexo使用命令" class="headerlink" title="Hexo使用命令"></a>Hexo使用命令</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo  sever ： #启动博客程序`</span><br><span class="line"></span><br><span class="line">`hexo clean： #用来清理缓存文件`</span><br><span class="line"></span><br><span class="line">`hexo g  ：    #生成文件`</span><br><span class="line">`hexo  s   ：  #运行本地服务器`</span><br><span class="line">`hexo  d   ： #上传到服务器</span><br></pre></td></tr></tbody></table></figure><p>出现如下界面就可以访问博客啦，在浏览器地址栏输入<a href="http://localhost:4000就可以访问了" target="_blank" rel="noopener">http://localhost:4000就可以访问了</a></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/11.png" alt=""></p><h3 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h3><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/12.png" alt=""></p><h1 id="将博客部署到Github上"><a href="#将博客部署到Github上" class="headerlink" title="将博客部署到Github上"></a>将博客部署到Github上</h1><h2 id="注册Github账户"><a href="#注册Github账户" class="headerlink" title="注册Github账户"></a>注册Github账户</h2><p>点击此处访问<a href="https://github.com/" target="_blank" rel="noopener">github官网</a>，点击 Sign Up 注册账户</p><p>登录后点击!</p><p>​    <img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/158781661405338.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/13.png" alt=""></p><h2 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h2><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：D\blog） Git Bash Here 输入以下命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> `$ ssh-keygen -t rsa -C "your email@example.com"` </span><br><span class="line"> `//引号里面填写你的邮箱地址`</span><br><span class="line"></span><br><span class="line">之后会出现：</span><br><span class="line"></span><br><span class="line"> `Generating public/private rsa key pair.`  </span><br><span class="line"> Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):  </span><br><span class="line"> `//到这里可以直接回车将密钥按默认文件进行存储`</span><br><span class="line"></span><br><span class="line">然后会出现：</span><br><span class="line"></span><br><span class="line"> `Enter passphrase (empty for no passphrase):`  </span><br><span class="line"> //这里是要你输入密码，其实不需要输什么密码，直接回车就行 </span><br><span class="line"> `Enter same passphrase again:`  </span><br><span class="line"></span><br><span class="line">接下来屏幕会显示：</span><br><span class="line"></span><br><span class="line"> `Your identification has been saved in /c/Users/you/.ssh/id_rsa.`  </span><br><span class="line"> Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.  </span><br><span class="line"> The key fingerprint is:  </span><br><span class="line"> 这里是各种字母数字组成的字符串，结尾是你的邮箱  </span><br><span class="line"> The key's randomart image is:  </span><br><span class="line"> `这里也是各种字母数字符号组成的字符串`</span><br></pre></td></tr></tbody></table></figure><p>运行以下命令，将公钥的内容复制到系统粘贴板上也可以去C盘的用户目录下</p><p>比如我的C:\Users\liuxin\.ssh找到id_rsa.pub打开复制</p><p> <code>$ clip &lt; ~/.ssh/id_rsa.pub</code></p><h2 id="GitHub-账户中添加你的公钥"><a href="#GitHub-账户中添加你的公钥" class="headerlink" title="GitHub 账户中添加你的公钥"></a>GitHub 账户中添加你的公钥</h2><p>①登陆 GitHub，进入 Settings：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/14.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/15.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/16.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/17.png" alt=""></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>输入以下命令：注意：<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>不要做任何更改！</p><p><code>ssh -T git@github.com</code></p><p>之后会显示：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/18.png" alt=""></p><p>输入 yes 后会显示：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/19.png" alt=""></p><p>此时表示设置正确</p><h2 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h2><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理</p><p><code>git config --global user.name "此处填你的用户名"</code><br><code>git config --global user.email  "此处填你的邮箱"</code></p><p>到此为止 SSH Key 配置成功，本机已成功连接到 Github</p><h2 id="将本地的-Hexo-文件更新到-Github-的库中"><a href="#将本地的-Hexo-文件更新到-Github-的库中" class="headerlink" title="将本地的 Hexo 文件更新到 Github 的库中"></a>将本地的 Hexo 文件更新到 Github 的库中</h2><p>登录 Github 打开自己的项目 your name.github.io</p><p>鼠标移到 Clone or download 按钮，选择 Use SSH</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/20.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/21.png" alt=""></p><p>打开你创建的文件夹（如：D:\blog）打开该文件夹下的 _config.yml 文件,我的是部署过得所以文件比你们的多</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/22.png" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/www.jpg" alt="a"></p><p>然后在D/blog目录下点击 Git Bash Here输入以下命令</p><p><code>hexo g</code><br> hexo d</p><p>或直接执行</p><p><code>hexo g -d</code></p><p>执行完之后会让你输入你的 Github 的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功</p><p> <code>ERROR Deployer not found: git</code></p><p>需要执行以下命令再安装一次：</p><p> <code>npm install hexo-deployer-git --save</code></p><p>再执行 <code>hexo g -d</code>，你的博客就会部署到 Github 上了</p><h2 id="访问博客"><a href="#访问博客" class="headerlink" title="访问博客"></a>访问博客</h2><p>进入你的项目点击settings,选择Options，往下翻找到GitHub Pages里面就是你的博客地址，现在每个人都可以通过此链接访问你的博客了！</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/qqq.jpg" alt=""></p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/lxwise/images/master/img/mmm.jpg" alt=""></p><h1 id="Hexo博客发表文章"><a href="#Hexo博客发表文章" class="headerlink" title="Hexo博客发表文章"></a>Hexo博客发表文章</h1><h3 id="新建一个空文章"><a href="#新建一个空文章" class="headerlink" title="新建一个空文章"></a>新建一个空文章</h3><p>输入以下命令，会在项目D:\blog\source_posts中生成 文章标题.md 文件，文章标题根据需要命名</p><p><code>hexo n "文章标题"</code></p><p>也可以直接在D:\blog\source_posts目录下右键鼠标新建文本文档，改后缀为 .md 即可，这种方法比较方便</p><h3 id="用编辑器编写文章"><a href="#用编辑器编写文章" class="headerlink" title="用编辑器编写文章:"></a>用编辑器编写文章:</h3><h3 id="推荐几款好用的md编辑器"><a href="#推荐几款好用的md编辑器" class="headerlink" title="推荐几款好用的md编辑器"></a>推荐几款好用的md编辑器</h3><p>md 全称 Markdown</p><p>1.Typora</p><p>2.MarkdownPad2</p><p>3.BookPad</p><p>4.小书匠</p><p>5.Sublime Text 3</p><p>文章标题，标签，分类，封面图片，摘要等，可以在 Front-matter 里面配置（Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，官方文档：<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a> ），举个例子：</p><hr><p>layout: 页面布局（配合主题文档使用）<br>title: 文章名称<br>date: 文章日期<br>comments: 文章是否开启评论<br>photos: 文章封面图（仅部分主题支持）<br>tags: </p><ul><li>文章标签一</li><li>文章标签二<br>categories: 文章分类<br>description: 文章描述，即要在首页显示的摘要（仅部分主题支持）</li></ul><hr><p><code>这里是摘要</code></p><p><code>&lt;!-- more --&gt;</code></p><p><code>这里是正文</code></p><p><code>注意：description 和 &lt;!-- more --&gt; 方式显示摘要二选一即可，部分主题不支持description，每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</code></p><p>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上</p><p> <code>hexo clean</code></p><p><code>hexo g</code></p><p><code>hexo d</code></p><p>现在访问你的博客就可以看见写好的文章啦！</p><p>好了现在就可以邀请你朋友一起看你的个人博客啦！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> -hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法的重载和重写</title>
      <link href="/2018/11/09/fang-fa-de-chong-zai-overload-he-chong-xie-override-overwrite/"/>
      <url>/2018/11/09/fang-fa-de-chong-zai-overload-he-chong-xie-override-overwrite/</url>
      
        <content type="html"><![CDATA[<p><strong>方法的重載（overload） loading…</strong></p><ul><li>1.定義：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。<pre><code>简单的说就是“**同一个类中，方法名相同**！**方法的参数不同**”</code></pre> 2.举例如：<br> //返回两个整数的和<pre><code>int add(int x,int y){return x+y;}//返回三个整数的和int add(int x,int y,int z){return x+y+z;}</code></pre> 3.判断是否是重载<br> 跟方法的权限修饰符，返回值类型，形参变量名，方法体都没关系<br> <strong><em>代码示例：</em></strong></li></ul><pre><code>public void getSum(int i,int j) {    System.out.println("1");}public void getSum(double d1, double d2) {    System.out.println("2");}public void getSum(String s,int i) {    System.out.println("3");}</code></pre><p><strong>方法重写（override/overwrite）</strong><br>1.重写：子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作</p><p>  2.应用：重写以后，创建子类对象，通过子类对象调用子父类中同名同参数的方法时，实际调用的是子类中重写父类的方法。</p><p> 3.重写的规定：<br>    方法的声明：权限修饰符  返回值类型  方法名（形参列表） throws 异常类型{<br>                     //方法体<br>                                }<br>                    约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法</p><p>①子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同<br>    ②子类重写的方法的权限修饰符不小于父类被重写方法的权限修饰符<br>             &gt;特殊情况：子类不能重写父类中声明为private权限的方法<br>        ③返回值类型：<br>            &gt;父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void<br>            &gt;父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类<br>        &gt;父类被重写的方法的返回值类型是基本数据类型（比如int），则子类重写的方法的返回值类型必须是相同的基本数据类型（必须是int）<br>        ④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><pre><code>注：实际开发中如果想重写方法，可以直接把父类中的方法声明，复制到子类写方法体就行    特别注意：子类和父类的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（静态的方法不能被重写）</code></pre><p><strong>代码示例:</strong><br>public class Person {</p><pre><code>String name;int age;public Person() {}public Person(String name,int age) {    this.name = name;    this.age = age;}public void eat() {    System.out.println("吃飯");}</code></pre><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br>public class Student extends Person{</p><pre><code>String major;public Student() {}public Student(String major) {    this.major = major;}//对父类中的eat方法进行重写public void eat() {    System.out.println("多吃素菜！!");}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> -java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好,Hexo</title>
      <link href="/2018/11/07/ni-hao-hexo/"/>
      <url>/2018/11/07/ni-hao-hexo/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> -hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/07/hello-world/"/>
      <url>/2018/11/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> -hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
